
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.hluther.interpreter.parser;

import java_cup.runtime.*;
import com.hluther.gui.LCompilerFrame;
import com.hluther.interpreter.lexer.Lexer;
import com.hluther.entityClasses.Language;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\002\010\000\002\002" +
    "\007\000\002\015\004\000\002\015\004\000\002\015\004" +
    "\000\002\015\004\000\002\015\004\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\006\006\000\002\011\006\000\002\012" +
    "\005\000\002\012\003\000\002\007\006\000\002\010\004" +
    "\000\002\010\004\000\002\010\003\000\002\010\003\000" +
    "\002\014\006\000\002\005\006\000\002\013\004\000\002" +
    "\013\004\000\002\013\003\000\002\013\003\000\002\003" +
    "\007\000\002\003\007\000\002\003\006\000\002\003\006" +
    "\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\014\011\016\012\017\013\004\014\005\015" +
    "\010\001\002\000\004\005\074\001\002\000\004\005\071" +
    "\001\002\000\016\004\ufff8\011\016\012\017\013\004\014" +
    "\005\015\010\001\002\000\016\004\ufff6\011\016\012\017" +
    "\013\004\014\005\015\010\001\002\000\004\005\064\001" +
    "\002\000\016\004\ufff5\011\016\012\017\013\004\014\005" +
    "\015\010\001\002\000\016\004\ufff7\011\016\012\017\013" +
    "\004\014\005\015\010\001\002\000\004\004\033\001\002" +
    "\000\016\004\ufff9\011\016\012\017\013\004\014\005\015" +
    "\010\001\002\000\004\002\031\001\002\000\004\005\026" +
    "\001\002\000\004\005\020\001\002\000\004\041\022\001" +
    "\002\000\004\006\025\001\002\000\006\006\ufff1\007\023" +
    "\001\002\000\004\041\022\001\002\000\004\006\ufff2\001" +
    "\002\000\016\004\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3" +
    "\015\ufff3\001\002\000\004\010\027\001\002\000\004\006" +
    "\030\001\002\000\016\004\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\001\002\000\004\002\001\001\002\000" +
    "\004\004\ufffe\001\002\000\010\004\036\016\034\017\037" +
    "\001\002\000\010\004\uffe7\016\034\017\037\001\002\000" +
    "\004\004\056\001\002\000\006\010\041\036\042\001\002" +
    "\000\010\004\uffe6\016\034\017\037\001\002\000\004\004" +
    "\uffe8\001\002\000\004\037\052\001\002\000\004\037\045" +
    "\001\002\000\004\004\044\001\002\000\004\002\uffff\001" +
    "\002\000\004\020\046\001\002\000\004\006\uffe1\001\002" +
    "\000\004\006\050\001\002\000\010\004\uffe2\010\041\036" +
    "\042\001\002\000\004\004\uffe4\001\002\000\004\020\046" +
    "\001\002\000\004\006\054\001\002\000\010\004\uffe3\010" +
    "\041\036\042\001\002\000\004\004\uffe5\001\002\000\006" +
    "\010\041\036\042\001\002\000\004\004\060\001\002\000" +
    "\004\002\000\001\002\000\004\004\uffe9\001\002\000\004" +
    "\004\ufffc\001\002\000\004\004\ufffa\001\002\000\004\010" +
    "\065\001\002\000\004\006\066\001\002\000\016\004\uffea" +
    "\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\001\002\000" +
    "\004\004\ufffb\001\002\000\004\004\ufffd\001\002\000\004" +
    "\041\072\001\002\000\004\006\073\001\002\000\016\004" +
    "\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\001\002" +
    "\000\006\010\075\041\076\001\002\000\010\006\uffed\010" +
    "\075\041\076\001\002\000\010\006\uffec\010\075\041\076" +
    "\001\002\000\004\006\100\001\002\000\016\004\ufff0\011" +
    "\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\001\002\000\004" +
    "\006\uffee\001\002\000\004\006\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\020\002\014\005\010\006\013\007\011\011" +
    "\005\014\006\015\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\010\006\013\007\011\011\005\014" +
    "\006\015\067\001\001\000\016\005\010\006\013\007\011" +
    "\011\005\014\006\015\066\001\001\000\002\001\001\000" +
    "\016\005\010\006\013\007\011\011\005\014\006\015\062" +
    "\001\001\000\016\005\010\006\013\007\011\011\005\014" +
    "\006\015\061\001\001\000\002\001\001\000\016\005\010" +
    "\006\013\007\011\011\005\014\006\015\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\034\001\001" +
    "\000\004\013\060\001\001\000\002\001\001\000\004\003" +
    "\042\001\001\000\004\013\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\050\001\001\000\002\001" +
    "\001\000\004\004\052\001\001\000\002\001\001\000\004" +
    "\003\054\001\001\000\002\001\001\000\004\003\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\076\001\001\000\004\010\101\001\001" +
    "\000\004\010\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private LCompilerFrame lCompilerFrame;
    
    public Parser(Lexer lexer, LCompilerFrame lCompilerFrame) { 
        super(lexer);
        this.lCompilerFrame = lCompilerFrame;
    }

    public void print(String msg){
        lCompilerFrame.printMessage(msg + "\n");
    }

    public void syntax_error(Symbol s){
        lCompilerFrame.printMessage("Numero no valido. debe de cumplir con la forma ##.##");
    }

    public void unrecovered_syntax_error(Symbol s){
       
    } 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= languageInformation SEPARATOR sourceCode SEPARATOR regularExpresions SEPARATOR 
            {
              Object RESULT =null;
		int languageleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int languageright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Language language = (Language)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 if(language.getName().equals("")){ print("Error Semantico: No se encontro ningun nombre para el lenguaje");} language.setSourceCode(code); if(language.getSourceCode().isBlank()){language.setSourceCode("");} System.out.println(language.getSourceCode()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= languageInformation SEPARATOR SEPARATOR regularExpresions SEPARATOR 
            {
              Object RESULT =null;
		int languageleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int languageright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Language language = (Language)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 if(language.getName().equals("")) { print("Error Semantico: No se encontro ningun nombre para el lenguaje");} System.out.println(language.getSourceCode()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // languageInformation ::= languageName languageInformation 
            {
              Language RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int languageleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int languageright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Language language = (Language)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 language.setName(name); RESULT = language; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("languageInformation",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // languageInformation ::= languageVersion languageInformation 
            {
              Language RESULT =null;
		int versionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int versionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String version = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int languageleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int languageright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Language language = (Language)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 language.setVersion(version); RESULT = language; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("languageInformation",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // languageInformation ::= languageAutor languageInformation 
            {
              Language RESULT =null;
		int authorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int authorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String author = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int languageleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int languageright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Language language = (Language)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 language.setAuthor(author); RESULT = language; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("languageInformation",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // languageInformation ::= languageRelease languageInformation 
            {
              Language RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int languageleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int languageright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Language language = (Language)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 language.setRelease(value); RESULT = language; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("languageInformation",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // languageInformation ::= languageExtension languageInformation 
            {
              Language RESULT =null;
		int extensionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int extensionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String extension = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int languageleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int languageright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Language language = (Language)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 language.setExtension(extension); RESULT = language; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("languageInformation",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // languageInformation ::= languageName 
            {
              Language RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Language(name, "", "", -1, ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("languageInformation",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // languageInformation ::= languageVersion 
            {
              Language RESULT =null;
		int versionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int versionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String version = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Language("", version, "", -1, ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("languageInformation",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // languageInformation ::= languageAutor 
            {
              Language RESULT =null;
		int authorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int authorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String author = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Language("", "", author, -1, ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("languageInformation",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // languageInformation ::= languageRelease 
            {
              Language RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Language("", "", "", value, ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("languageInformation",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // languageInformation ::= languageExtension 
            {
              Language RESULT =null;
		int extensionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int extensionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String extension = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Language("", "", "", -1, extension); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("languageInformation",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // languageName ::= NAME COLON ID SEMICOLON 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = name; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("languageName",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // languageVersion ::= VERSION COLON version SEMICOLON 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = value; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("languageVersion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // version ::= INTEGERNUM FULLSTOP version 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int previousValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int previousValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String previousValue = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = value.toString() +"."+ previousValue; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("version",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // version ::= INTEGERNUM 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = value.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("version",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // languageAutor ::= AUTHOR COLON author SEMICOLON 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = name; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("languageAutor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // author ::= ID author 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int previousNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int previousNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String previousName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = name +" "+ previousName; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("author",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // author ::= INTEGERNUM author 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int previousNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int previousNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String previousName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = value.toString() +" "+ previousName; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("author",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // author ::= ID 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = name; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("author",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // author ::= INTEGERNUM 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = value.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("author",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // languageRelease ::= RELEASE COLON INTEGERNUM SEMICOLON 
            {
              Integer RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = value; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("languageRelease",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // languageExtension ::= EXTENSION COLON ID SEMICOLON 
            {
              String RESULT =null;
		int extensionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int extensionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String extension = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = extension; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("languageExtension",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sourceCode ::= CODE sourceCode 
            {
              String RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int previousCodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int previousCoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String previousCode = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = code + previousCode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sourceCode",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sourceCode ::= SPECIALCHARACTER sourceCode 
            {
              String RESULT =null;
		int characterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int characterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String character = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int previousCodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int previousCoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String previousCode = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = character + previousCode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sourceCode",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sourceCode ::= CODE 
            {
              String RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = code; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sourceCode",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sourceCode ::= SPECIALCHARACTER 
            {
              String RESULT =null;
		int characterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int characterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String character = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = character; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sourceCode",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // regularExpresions ::= ID EQUALS expresion SEMICOLON regularExpresions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("regularExpresions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // regularExpresions ::= IGNORE EQUALS expresion SEMICOLON regularExpresions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("regularExpresions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // regularExpresions ::= ID EQUALS expresion SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("regularExpresions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // regularExpresions ::= IGNORE EQUALS expresion SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("regularExpresions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= QUESTIONMARK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
