/* The following code was generated by JFlex 1.7.0 */

package com.hluther.interpreter.lexer;
import com.hluther.gui.LCompilerFrame;
import com.hluther.interpreter.parser.sym;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexer.lex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CODE = 2;
  public static final int REGULAR_EXPRESIONS_DECLARATION = 4;
  public static final int REGULAR_EXPRESIONS_DEFINITION = 6;
  public static final int SYMBOLS = 8;
  public static final int GRAMMAR = 10;
  public static final int GRAMMAR_CODE = 12;
  public static final int ID = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\3\1\0\1\5\1\4\22\0\1\5\1\0\1\45"+
    "\2\0\1\6\1\34\1\0\1\46\1\47\1\10\1\36\1\50\1\41"+
    "\1\13\1\7\12\2\1\11\1\12\1\0\1\33\1\0\1\35\1\0"+
    "\32\43\1\40\1\44\1\42\3\0\1\25\1\17\1\51\1\52\1\21"+
    "\3\1\1\24\2\1\1\30\1\16\1\14\1\15\2\1\1\20\1\23"+
    "\1\27\1\26\1\22\1\1\1\32\1\1\1\31\1\53\1\37\1\54"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\3\2\4\2\1\1\5\1\6"+
    "\1\7\5\2\1\10\2\11\1\10\1\1\1\12\1\13"+
    "\1\14\2\15\1\14\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\14\1\25\1\26\1\27\1\30\1\1"+
    "\4\30\1\31\1\32\1\30\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\37\1\41\1\42\1\0\5\2\1\43"+
    "\1\44\1\45\4\0\1\46\1\47\1\50\1\51\1\52"+
    "\4\30\1\53\2\42\2\0\5\2\2\45\5\0\4\30"+
    "\1\0\1\54\5\2\1\0\1\55\3\0\1\56\3\30"+
    "\1\54\3\2\1\57\1\2\1\55\1\60\1\61\1\62"+
    "\3\30\1\63\3\2\1\64\1\30\1\65\1\2\1\66"+
    "\1\2\1\30\2\2\1\67\1\70\2\2\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u0168\0\u01ef\0\u021c\0\u0249\0\u0168"+
    "\0\u0168\0\u0168\0\u0276\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0168"+
    "\0\u0168\0\u0357\0\u0384\0\u03b1\0\u0168\0\u0168\0\u0168\0\u0168"+
    "\0\u03de\0\u040b\0\u0168\0\u0168\0\u0168\0\u0168\0\u0168\0\u0438"+
    "\0\u0168\0\u0465\0\u0168\0\u0168\0\u0168\0\u0492\0\u04bf\0\u04ec"+
    "\0\u0519\0\u0546\0\u0573\0\u05a0\0\u0168\0\u05cd\0\u05fa\0\u0168"+
    "\0\u0168\0\u0168\0\u0168\0\u0627\0\u0249\0\u0168\0\u0654\0\u0681"+
    "\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762\0\u0168\0\u0168\0\u078f"+
    "\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0168\0\u0168\0\u0168\0\u0168"+
    "\0\u0492\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0168\0\u0168\0\u0924"+
    "\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0168"+
    "\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7"+
    "\0\u0bf4\0\u0c21\0\u0c4e\0\u0951\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02"+
    "\0\u0d2f\0\u0d5c\0\u0ab9\0\u0d89\0\u0db6\0\u0de3\0\u0492\0\u0e10"+
    "\0\u0e3d\0\u0e6a\0\u0168\0\u0e97\0\u0ec4\0\u0ef1\0\u0195\0\u0f1e"+
    "\0\u0168\0\u0168\0\u0168\0\u0168\0\u0f4b\0\u0f78\0\u0fa5\0\u0195"+
    "\0\u0fd2\0\u0fff\0\u102c\0\u0492\0\u1059\0\u0492\0\u1086\0\u0195"+
    "\0\u10b3\0\u10e0\0\u110d\0\u113a\0\u0492\0\u0195\0\u1167\0\u1194"+
    "\0\u0195";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\1\15\1\14\1\16\1\17"+
    "\1\11\1\20\1\21\1\22\1\23\4\12\1\24\1\25"+
    "\2\12\1\26\2\12\1\27\2\12\10\11\1\12\5\11"+
    "\2\12\2\11\3\30\1\31\1\32\1\31\1\33\46\30"+
    "\1\11\1\12\1\11\1\14\1\15\1\14\1\34\1\17"+
    "\4\11\17\12\1\35\1\36\6\11\1\12\5\11\2\12"+
    "\2\11\3\37\1\40\1\41\1\40\1\37\1\42\1\43"+
    "\1\37\1\44\22\37\1\45\1\46\1\47\1\50\1\37"+
    "\1\51\1\37\1\52\1\53\1\54\1\55\5\37\1\11"+
    "\1\56\1\11\1\14\1\15\1\14\1\57\1\17\2\11"+
    "\1\21\1\11\1\60\3\56\1\61\1\62\5\56\1\63"+
    "\3\56\10\11\1\64\4\11\1\65\1\66\1\56\3\11"+
    "\1\56\1\11\1\14\1\15\1\14\1\11\1\17\1\11"+
    "\1\67\1\70\1\11\17\56\10\11\1\64\5\11\2\56"+
    "\1\71\1\11\3\30\1\31\1\32\1\31\46\30\1\72"+
    "\1\73\1\74\1\73\1\14\1\15\1\14\1\73\1\75"+
    "\4\73\17\74\10\73\1\74\5\73\2\74\2\73\56\0"+
    "\2\12\11\0\17\12\10\0\1\12\5\0\2\12\4\0"+
    "\1\13\55\0\1\14\57\0\1\76\55\0\1\77\1\100"+
    "\45\0\2\12\11\0\1\12\1\101\15\12\10\0\1\12"+
    "\5\0\2\12\3\0\2\12\11\0\16\12\1\102\10\0"+
    "\1\12\5\0\2\12\3\0\2\12\11\0\5\12\1\103"+
    "\11\12\10\0\1\12\5\0\2\12\3\0\2\12\11\0"+
    "\12\12\1\104\4\12\10\0\1\12\5\0\2\12\3\0"+
    "\2\12\11\0\11\12\1\105\5\12\10\0\1\12\5\0"+
    "\2\12\5\0\1\31\57\0\1\106\54\0\1\107\51\0"+
    "\1\40\60\0\1\110\1\111\45\0\1\112\1\113\11\0"+
    "\17\112\10\0\1\114\5\0\2\112\16\0\1\115\2\0"+
    "\1\116\7\0\1\117\26\0\1\56\12\0\17\56\16\0"+
    "\2\56\10\0\1\120\47\0\1\56\12\0\1\56\1\121"+
    "\15\56\16\0\2\56\3\0\1\56\12\0\5\56\1\122"+
    "\11\56\16\0\2\56\3\0\1\56\12\0\1\123\16\56"+
    "\16\0\2\56\3\0\1\56\12\0\5\56\1\124\11\56"+
    "\16\0\2\56\45\0\1\64\12\0\1\56\12\0\11\56"+
    "\1\125\5\56\16\0\2\56\13\0\1\126\44\0\2\74"+
    "\11\0\17\74\10\0\1\74\5\0\2\74\2\0\3\77"+
    "\1\127\1\130\50\77\7\131\1\0\1\132\44\131\1\0"+
    "\2\12\11\0\2\12\1\133\14\12\10\0\1\12\5\0"+
    "\2\12\3\0\2\12\11\0\13\12\1\134\3\12\10\0"+
    "\1\12\5\0\2\12\3\0\2\12\11\0\4\12\1\135"+
    "\12\12\10\0\1\12\5\0\2\12\3\0\2\12\11\0"+
    "\13\12\1\136\3\12\10\0\1\12\5\0\2\12\3\0"+
    "\2\12\11\0\1\137\16\12\10\0\1\12\5\0\2\12"+
    "\2\0\3\110\1\140\1\141\50\110\7\142\1\0\1\143"+
    "\44\142\41\0\1\144\54\0\1\145\54\0\1\146\14\0"+
    "\1\56\12\0\11\56\1\147\5\56\16\0\2\56\3\0"+
    "\1\56\12\0\13\56\1\150\3\56\16\0\2\56\3\0"+
    "\1\56\12\0\4\56\1\151\12\56\16\0\2\56\3\0"+
    "\1\56\12\0\17\56\16\0\1\56\1\152\5\0\1\127"+
    "\51\0\10\131\1\153\53\131\1\154\1\153\44\131\1\0"+
    "\2\12\11\0\3\12\1\155\13\12\10\0\1\12\5\0"+
    "\2\12\3\0\2\12\11\0\5\12\1\156\11\12\10\0"+
    "\1\12\5\0\2\12\3\0\2\12\11\0\7\12\1\157"+
    "\7\12\10\0\1\12\5\0\2\12\3\0\2\12\11\0"+
    "\1\12\1\160\15\12\10\0\1\12\5\0\2\12\3\0"+
    "\2\12\11\0\15\12\1\161\1\12\10\0\1\12\5\0"+
    "\2\12\5\0\1\140\51\0\10\142\1\162\53\142\1\163"+
    "\1\162\44\142\1\0\1\164\12\0\17\164\16\0\2\164"+
    "\4\0\1\165\115\0\1\166\12\0\1\56\12\0\14\56"+
    "\1\167\2\56\16\0\2\56\3\0\1\56\12\0\5\56"+
    "\1\170\11\56\16\0\2\56\3\0\1\56\12\0\2\56"+
    "\1\171\14\56\16\0\2\56\3\0\1\56\12\0\5\56"+
    "\1\172\11\56\16\0\2\56\2\0\7\131\1\173\1\153"+
    "\44\131\1\0\2\12\11\0\4\12\1\174\12\12\10\0"+
    "\1\12\5\0\2\12\3\0\2\12\11\0\1\175\16\12"+
    "\10\0\1\12\5\0\2\12\3\0\2\12\11\0\10\12"+
    "\1\176\6\12\10\0\1\12\5\0\2\12\3\0\2\12"+
    "\11\0\4\12\1\177\12\12\10\0\1\12\5\0\2\12"+
    "\3\0\2\12\11\0\11\12\1\200\5\12\10\0\1\12"+
    "\5\0\2\12\2\0\7\142\1\201\1\162\44\142\42\0"+
    "\1\202\54\0\1\203\54\0\1\204\13\0\1\56\12\0"+
    "\4\56\1\205\12\56\16\0\2\56\3\0\1\56\12\0"+
    "\10\56\1\206\6\56\16\0\2\56\3\0\1\56\12\0"+
    "\1\207\16\56\16\0\2\56\3\0\2\12\11\0\5\12"+
    "\1\210\11\12\10\0\1\12\5\0\2\12\3\0\2\12"+
    "\11\0\7\12\1\211\7\12\10\0\1\12\5\0\2\12"+
    "\3\0\2\12\11\0\1\12\1\212\15\12\10\0\1\12"+
    "\5\0\2\12\3\0\2\12\11\0\2\12\1\213\14\12"+
    "\10\0\1\12\5\0\2\12\3\0\1\56\12\0\1\56"+
    "\1\214\15\56\16\0\2\56\3\0\1\56\12\0\1\215"+
    "\16\56\16\0\2\56\3\0\1\56\12\0\11\56\1\216"+
    "\5\56\16\0\2\56\3\0\2\12\11\0\10\12\1\217"+
    "\6\12\10\0\1\12\5\0\2\12\3\0\2\12\11\0"+
    "\1\220\16\12\10\0\1\12\5\0\2\12\3\0\2\12"+
    "\11\0\10\12\1\221\6\12\10\0\1\12\5\0\2\12"+
    "\3\0\1\56\12\0\11\56\1\222\5\56\16\0\2\56"+
    "\3\0\2\12\11\0\1\12\1\223\15\12\10\0\1\12"+
    "\5\0\2\12\3\0\2\12\11\0\5\12\1\224\11\12"+
    "\10\0\1\12\5\0\2\12\3\0\1\56\12\0\14\56"+
    "\1\225\2\56\16\0\2\56\3\0\2\12\11\0\1\226"+
    "\16\12\10\0\1\12\5\0\2\12\3\0\2\12\11\0"+
    "\1\227\16\12\10\0\1\12\5\0\2\12\3\0\2\12"+
    "\11\0\13\12\1\230\3\12\10\0\1\12\5\0\2\12"+
    "\3\0\2\12\11\0\1\12\1\231\15\12\10\0\1\12"+
    "\5\0\2\12\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4545];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\2\1\1\11\3\1\3\11\5\1\2\11"+
    "\3\1\4\11\2\1\5\11\1\1\1\11\1\1\3\11"+
    "\7\1\1\11\2\1\4\11\2\1\1\11\1\1\1\0"+
    "\5\1\2\11\1\1\4\0\4\11\5\1\2\11\1\1"+
    "\2\0\5\1\1\11\1\1\5\0\4\1\1\0\6\1"+
    "\1\0\1\1\3\0\4\1\1\11\5\1\4\11\25\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private LCompilerFrame lCompilerFrame;
    private String errorLexeme; 
    private int line;
    private int column;

    public Lexer(java.io.Reader in, LCompilerFrame lCompilerFrame) {
        this.lCompilerFrame = lCompilerFrame;    
        this.zzReader = in;
        this.errorLexeme = "";
        line = -1;
        column = -1;
    }
        
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline+1, yycolumn, value);
    }

    private void printToken(String token){
        System.out.println(token);
    }

    private void createErrorLexeme(String lexeme, int line, int column){
        if(this.line == -1 && this.column == -1){
            this.line = line;
            this.column = column;
        }
        errorLexeme = errorLexeme + lexeme;
    }

    private void printError(){
        if(line != -1 && column != -1){
            lCompilerFrame.printMessage("Error Lexico: Lexema ["+errorLexeme+"] no reconocido en esta seccion del archivo. Linea: "+line+" Columna: "+column + "\n");
            errorLexeme = "";
            line = -1;
            column = -1;
        }
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 154) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { printToken("ERROR"); createErrorLexeme(yytext(), (yyline+1), yycolumn);
            } 
            // fall through
          case 58: break;
          case 2: 
            { printToken("ID"); printError(); return symbol(sym.ID, yytext());
            } 
            // fall through
          case 59: break;
          case 3: 
            { printToken("INTEGERNUM"); printError(); return symbol(sym.INTEGERNUM, new Integer(yytext()));
            } 
            // fall through
          case 60: break;
          case 4: 
            { printError();
            } 
            // fall through
          case 61: break;
          case 5: 
            { printToken("COLON"); printError(); return symbol(sym.COLON, yytext());
            } 
            // fall through
          case 62: break;
          case 6: 
            { printToken("SEMICOLON"); printError(); return symbol(sym.SEMICOLON, yytext());
            } 
            // fall through
          case 63: break;
          case 7: 
            { printToken("FULLSTOP"); printError(); return symbol(sym.FULLSTOP, yytext());
            } 
            // fall through
          case 64: break;
          case 8: 
            { printToken("CODE"); return symbol(sym.CODE, yytext());
            } 
            // fall through
          case 65: break;
          case 9: 
            { printToken("SPECIALCHARACTER"); return symbol(sym.SPECIALCHARACTER, yytext());
            } 
            // fall through
          case 66: break;
          case 10: 
            { yybegin(REGULAR_EXPRESIONS_DEFINITION); printToken("EQUALS"); printError(); return symbol(sym.EQUALS, yytext());
            } 
            // fall through
          case 67: break;
          case 11: 
            { printToken("IGNORE"); return symbol(sym.IGNORE, yytext());
            } 
            // fall through
          case 68: break;
          case 12: 
            { printToken("CHARACTER"); return symbol(sym.CHARACTER, yytext());
            } 
            // fall through
          case 69: break;
          case 13: 
            { 
            } 
            // fall through
          case 70: break;
          case 14: 
            { printToken("ASTERISK"); return symbol(sym.ASTERISK, yytext());
            } 
            // fall through
          case 71: break;
          case 15: 
            { yybegin(REGULAR_EXPRESIONS_DECLARATION); printToken("SEMICOLON"); return symbol(sym.SEMICOLON, yytext());
            } 
            // fall through
          case 72: break;
          case 16: 
            { printToken("QUESTIONMARK"); return symbol(sym.QUESTIONMARK, yytext());
            } 
            // fall through
          case 73: break;
          case 17: 
            { printToken("PLUS"); return symbol(sym.PLUS, yytext());
            } 
            // fall through
          case 74: break;
          case 18: 
            { printToken("VERTICALBAR"); return symbol(sym.VERTICALBAR, yytext());
            } 
            // fall through
          case 75: break;
          case 19: 
            { printToken("SQUAREBRACKETO"); return symbol(sym.SQUAREBRACKETO, yytext());
            } 
            // fall through
          case 76: break;
          case 20: 
            { printToken("SQUAREBRACKETC"); return symbol(sym.SQUAREBRACKETC, yytext());
            } 
            // fall through
          case 77: break;
          case 21: 
            { printToken("DOUBLEQUOTES"); return symbol(sym.DOUBLEQUOTES, yytext());
            } 
            // fall through
          case 78: break;
          case 22: 
            { printToken("PARENTHESESO"); return symbol(sym.PARENTHESESO, yytext());
            } 
            // fall through
          case 79: break;
          case 23: 
            { printToken("PARENTHESESC"); return symbol(sym.PARENTHESESC, yytext());
            } 
            // fall through
          case 80: break;
          case 24: 
            { printToken("TERMINALSYM"); printError(); return symbol(sym.TERMINALSYM, yytext());
            } 
            // fall through
          case 81: break;
          case 25: 
            { printToken("NONTERMINALSYM"); printError(); return symbol(sym.NONTERMINALSYM, yytext());
            } 
            // fall through
          case 82: break;
          case 26: 
            { printToken("COMMA"); printError(); return symbol(sym.COMMA, yytext());
            } 
            // fall through
          case 83: break;
          case 27: 
            { yybegin(ID); printToken("COLON"); printError(); return symbol(sym.COLON, yytext());
            } 
            // fall through
          case 84: break;
          case 28: 
            { printToken("SEMICOLON"); return symbol(sym.SEMICOLON, yytext());
            } 
            // fall through
          case 85: break;
          case 29: 
            { yybegin(GRAMMAR_CODE); printToken("CURLYBRACKETO"); return symbol(sym.CURLYBRACKETO, yytext());
            } 
            // fall through
          case 86: break;
          case 30: 
            { yybegin(GRAMMAR); printToken("CURLYBRACKETC"); return symbol(sym.CURLYBRACKETC, yytext());
            } 
            // fall through
          case 87: break;
          case 31: 
            { yybegin(GRAMMAR); printToken("ERROR"); createErrorLexeme(yytext(), (yyline+1), yycolumn);
            } 
            // fall through
          case 88: break;
          case 32: 
            { yybegin(GRAMMAR); printToken("ID"); printError(); return symbol(sym.ID, yytext());
            } 
            // fall through
          case 89: break;
          case 33: 
            { yybegin(CODE); printToken("SEPARATOR"); printError(); return symbol(sym.SEPARATOR, yytext());
            } 
            // fall through
          case 90: break;
          case 34: 
            { printToken("LINECOMMENT"); printError();
            } 
            // fall through
          case 91: break;
          case 35: 
            { yybegin(REGULAR_EXPRESIONS_DECLARATION); printToken("SEPARATOR"); return symbol(sym.SEPARATOR, yytext());
            } 
            // fall through
          case 92: break;
          case 36: 
            { yybegin(SYMBOLS); printToken("SEPARATOR"); printError(); return symbol(sym.SEPARATOR, yytext());
            } 
            // fall through
          case 93: break;
          case 37: 
            { printToken("LINECOMMENT");
            } 
            // fall through
          case 94: break;
          case 38: 
            { printToken("LINEBREAK"); return symbol(sym.LINEBREAK, yytext());
            } 
            // fall through
          case 95: break;
          case 39: 
            { printToken("BLANKSPACE"); return symbol(sym.BLANKSPACE, yytext());
            } 
            // fall through
          case 96: break;
          case 40: 
            { printToken("TAB"); return symbol(sym.TAB, yytext());
            } 
            // fall through
          case 97: break;
          case 41: 
            { yybegin(GRAMMAR); printToken("SEPARATOR"); printError(); return symbol(sym.SEPARATOR, yytext());
            } 
            // fall through
          case 98: break;
          case 42: 
            { printToken("NOT"); printError(); return symbol(sym.NOT, yytext());
            } 
            // fall through
          case 99: break;
          case 43: 
            { printToken("DOBLECOLON"); printError(); return symbol(sym.DOBLECOLON, yytext());
            } 
            // fall through
          case 100: break;
          case 44: 
            { printToken("BLOCKCOMMENT"); printError();
            } 
            // fall through
          case 101: break;
          case 45: 
            { printToken("BLOCKCOMMENT");
            } 
            // fall through
          case 102: break;
          case 46: 
            { printToken("REAL"); printError(); return symbol(sym.REAL, yytext());
            } 
            // fall through
          case 103: break;
          case 47: 
            { printToken("AUTHOR"); printError(); return symbol(sym.AUTHOR, yytext());
            } 
            // fall through
          case 104: break;
          case 48: 
            { printToken("MACROLETTERSMIN"); return symbol(sym.MACROLETTERSMIN, yytext().replace("[", "").replace("]", "").replaceAll(" ", ""));
            } 
            // fall through
          case 105: break;
          case 49: 
            { printToken("MACRONUMBERS"); return symbol(sym.MACRONUMBERS, yytext().replace("[", "").replace("]", "").replaceAll(" ", ""));
            } 
            // fall through
          case 106: break;
          case 50: 
            { printToken("MACROLETTERSMAY"); return symbol(sym.MACROLETTERSMAY, yytext().replace("[", "").replace("]", "").replaceAll(" ", ""));
            } 
            // fall through
          case 107: break;
          case 51: 
            { printToken("NAME"); printError(); return symbol(sym.NAME, yytext());
            } 
            // fall through
          case 108: break;
          case 52: 
            { printToken("INTEGER"); printError(); return symbol(sym.INTEGER, yytext());
            } 
            // fall through
          case 109: break;
          case 53: 
            { printToken("STRING"); printError(); return symbol(sym.STRING, yytext());
            } 
            // fall through
          case 110: break;
          case 54: 
            { printToken("VERSION"); printError(); return symbol(sym.VERSION, yytext());
            } 
            // fall through
          case 111: break;
          case 55: 
            { printToken("TERMINAL"); printError(); return symbol(sym.TERMINAL, yytext());
            } 
            // fall through
          case 112: break;
          case 56: 
            { printToken("EXTENSION"); printError(); return symbol(sym.EXTENSION, yytext());
            } 
            // fall through
          case 113: break;
          case 57: 
            { printToken("RELEASE"); printError(); return symbol(sym.RELEASE, yytext());
            } 
            // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
